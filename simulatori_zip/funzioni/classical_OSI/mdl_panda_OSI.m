%MDL_PANDA Create model of Franka-Emika PANDA robot
%
% MDL_PANDA is a script that creates the workspace variable panda which
% describes the kinematic characteristics of a Franka-Emika PANDA manipulator
% using standard DH conventions.
%
% Also define the workspace vectors:
%   qz         zero joint angle configuration
%   qr         arm along +ve x-axis configuration
%
% Reference::
% - http://www.diag.uniroma1.it/~deluca/rob1_en/WrittenExamsRob1/Robotics1_18.01.11.pdf
% - "Dynamic Identification of the Franka Emika Panda Robot With Retrieval of Feasible Parameters Using Penalty-Based Optimization"
%   C. Gaz, M. Cognetti, A. Oliva, P. Robuffo Giordano and A. De Luca
%   IEEE Robotics and Automation Letters 4(4), pp. 4147-4154, Oct. 2019, doi: 10.1109/LRA.2019.2931248
%
% Notes::
% - SI units of metres are used.
% - Unlike most other mdl_xxx scripts this one is actually a function that
%   behaves like a script and writes to the global workspace.
%
% See also mdl_sawyer, SerialLink.

% MODEL: Franka-Emika, PANDA, 7DOF, standard_DH

% Copyright (C) 1993-2018, by Peter I. Corke
%
% This file is part of The Robotics Toolbox for MATLAB (RTB).
% 
% RTB is free software: you can redistribute it and/or modify
% it under the terms of the GNU Lesser General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% RTB is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
% 
% You should have received a copy of the GNU Leser General Public License
% along with RTB.  If not, see <http://www.gnu.org/licenses/>.
%
% http://www.petercorke.com

function r = mdl_panda_OSI()
    
    deg = pi/180;
    mm = 1e-3;
    
    
    %% Define links (thanks Alex Smith for this code)
    L1 = RevoluteMDH('a',     0.0, 'd', 0.333, 'alpha',   0.0, ...
        'qlim', [-2.8973 2.8973], ...
        'm', 0.573446265, ...
        'r', [-0.000211961345, 0.00145073138, -0.00781818897], ...
        'I', [0.353806271, 0.354292553, 2.10856051e-15, 0.0000818121677, -0.00663519037, 0.00187517984], ...
        'G', 1);
    L2 = RevoluteMDH('a',     0.0, 'd',   0.0, 'alpha', -pi/2, ...
        'qlim', [-1.7628 1.7628], ...
    	'm', 9.99991895, ...
        'r', [0.00216430246, -0.0626598449, 0.0000923196297], ...
        'I', [0.00000000166983388, 1.04210043e-11, 0.0000000337266376, -0.0621304383, -0.0165234205, -0.0676330086], ...
        'G', 1);
    L3 = RevoluteMDH('a',     0.0, 'd', 0.316, 'alpha',  pi/2, ...
        'qlim', [-2.8973 2.8973], ...
    	'm', 2.26869529, ...
        'r', [0.0640427313, 0.00634650263, -0.0999999915], ...
        'I', [0.0000000297475196, 0.0000000178685873, 2.93684527e-12, 0.0141174377, -0.00745902179, -0.0307224333], ...
        'G', 1);
    L4 = RevoluteMDH('a',  0.0825, 'd',   0.0, 'alpha',  pi/2, ...
        'qlim', [-3.0718 -0.0698], ...
    	'm', 1.27453069, ...
        'r', [-0.0535499562, 0.149999634, -0.00589283359], ...
        'I', [0.0386492356, 2.76271754e-13, 9.04729975e-11, -0.00813347032, 0.0102496705, -0.0057677473], ...
        'G', 1);
    L5 = RevoluteMDH('a', -0.0825, 'd', 0.384, 'alpha', -pi/2, ...
        'qlim', [-2.8973 2.8973], ...
    	'm', 2.38484026, ...
        'r', [-0.00327346467, 0.0163415173, -0.169462912], ...
        'I', [0.0198844561, 5.07362093e-11, 1.8955359e-15, 0.00340981557, 0.00109763187, 0.0019863573], ...
        'G', 1);
    L6 = RevoluteMDH('a',     0.0, 'd',   0.0, 'alpha',  pi/2, ...
        'qlim', [-0.0175 3.7525], ...
    	'm', 2.79686223, ...
        'r', [0.0569449741, -0.0466965605, -0.0151031123], ...
        'I', [0.00000000845281151, 9.02797161e-11, 1.52354999e-12, 0.00378343389, 0.00229516324, 0.00959051441], ...
        'G', 1);
    L7 = RevoluteMDH('a',   0.088, 'd',   0.107, 'alpha',  pi/2, ...
        'qlim', [-2.8973 2.8973], ...
    	'm', 0.701575283, ...
        'r', [0.00400289233, 0.00718518956, 0.0492168182], ...
        'I', [1.45800336e-11, 0.00485838875, 3.19864984e-18, -0.00706155752, 0.00371131069, -0.00365729709], ...
        'G', 1);

    %% Create SerialLink object
    a=sin(pi/4);
    T=[a,a,0,0;-a,a,0,0;0,0,1,0.1034;0,0,0,1];
    robot = SerialLink([L1 L2 L3 L4 L5 L6 L7], 'name', 'PANDA', 'manufacturer', 'Franka-Emika', 'tool', T);

    qv = [0 0 0 -4 0 0 0]*deg;
    qr = [0 -90 -90 90 0 -90 90]*deg;
        
    % place the variables into the global workspace
    if nargin == 1
        r = robot;
    elseif nargin == 0
        assignin('caller', 'panda_OSI', robot);
        assignin('caller', 'qv', qv); % zero angles
        assignin('caller', 'qr', qr); 
    end
end