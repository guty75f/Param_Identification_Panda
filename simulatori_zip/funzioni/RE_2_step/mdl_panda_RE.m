%MDL_PANDA Create model of Franka-Emika PANDA robot
%
% MDL_PANDA is a script that creates the workspace variable panda which
% describes the kinematic characteristics of a Franka-Emika PANDA manipulator
% using standard DH conventions.
%
% Also define the workspace vectors:
%   qz         zero joint angle configuration
%   qr         arm along +ve x-axis configuration
%
% Reference::
% - http://www.diag.uniroma1.it/~deluca/rob1_en/WrittenExamsRob1/Robotics1_18.01.11.pdf
% - "Dynamic Identification of the Franka Emika Panda Robot With Retrieval of Feasible Parameters Using Penalty-Based Optimization"
%   C. Gaz, M. Cognetti, A. Oliva, P. Robuffo Giordano and A. De Luca
%   IEEE Robotics and Automation Letters 4(4), pp. 4147-4154, Oct. 2019, doi: 10.1109/LRA.2019.2931248
%
% Notes::
% - SI units of metres are used.
% - Unlike most other mdl_xxx scripts this one is actually a function that
%   behaves like a script and writes to the global workspace.
%
% See also mdl_sawyer, SerialLink.

% MODEL: Franka-Emika, PANDA, 7DOF, standard_DH

% Copyright (C) 1993-2018, by Peter I. Corke
%
% This file is part of The Robotics Toolbox for MATLAB (RTB).
% 
% RTB is free software: you can redistribute it and/or modify
% it under the terms of the GNU Lesser General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% RTB is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
% 
% You should have received a copy of the GNU Leser General Public License
% along with RTB.  If not, see <http://www.gnu.org/licenses/>.
%
% http://www.petercorke.com

function r = mdl_panda_RE()
    
    deg = pi/180;
    mm = 1e-3;
    
    
    %% Define links (thanks Alex Smith for this code)
    L1 = RevoluteMDH('a',     0.0, 'd', 0.333, 'alpha',   0.0, ...
        'qlim', [-2.8973 2.8973], ...
        'm', 5.18885341,...
        'r', [0.000310670994, 0.00048702338, -0.284864701], ...
        'I', [0.647058213, 0.638885469, 0.0148213635, -0.00250933361, -0.0263501028, 0.017672089], ...
        'G', 1);
    L2 = RevoluteMDH('a',     0.0, 'd',   0.0, 'alpha', -pi/2,...
        'qlim', [-1.7628 1.7628], ...
    	'm', 3.57803381,...
        'r', [-0.00169820476, -0.066744238, -0.019343588],...
        'I', [0.015564024, 0.0225613618, 0.0216610536, -0.00610571706, 0.00618174773, 0.0104292641],...
        'G', 1);
    L3 = RevoluteMDH('a',     0.0, 'd', 0.316, 'alpha',  pi/2,...
        'qlim', [-2.8973 2.8973], ...
    	'm', 2.57946073, ...
        'r', [0.0404172183, 0.027109946, -0.0717394224], ...
        'I', [0.0747386035, 0.0780056469, 0.0101524689, -0.0046972343, -0.0129798476, -0.019302434], ...
        'G', 1);
    L4 = RevoluteMDH('a',  0.0825, 'd',   0.0, 'alpha',  pi/2,  ...
        'qlim', [-3.0718 -0.0698], ...
    	'm', 3.27491836,  ...
        'r', [-0.054487931, 0.121137992, 0.0140974112],  ...
        'I', [0.046960598, 0.023310953, 0.0423753002, 0.0153578342, 0.0000878062993, 0.00485718902],  ...
        'G', 1);
    L5 = RevoluteMDH('a', -0.0825, 'd', 0.384, 'alpha', -pi/2,  ...
        'qlim', [-2.8973 2.8973], ...
    	'm', 1.14793868,   ...
        'r', [-0.00835419613, 0.0347878171, -0.11871925],   ...
        'I', [0.0348205724, 0.0326815879, 0.00569822076, -0.00153340873, -0.0028081179, 0.00448133647],   ...
        'G', 1);
    L6 = RevoluteMDH('a',     0.0, 'd',   0.0, 'alpha',  pi/2, ...
    	'qlim', [-0.0175 3.7525], ...
    	'm', 1.7389391, ...
    	'r', [0.0484234486, -0.0426622262, -0.0205649858], ...
    	'I', [0.00450549715, 0.0146938313, 0.014698641, 0.00287647885, -0.000633379018, -0.000589437085], ...
    	'G', 1);
    L7 = RevoluteMDH('a',   0.088, 'd',   0.107, 'alpha',  pi/2, ...
    	'qlim', [-2.8973 2.8973], ...
    	'm', 1.63210556, ...
    	'r', [0.000268296699, -0.000404130753, 0.0560432959], ...
    	'I', [0.0229511286, 0.0225536166, 0.00775477391, -0.00347639936, 0.000615288903, 0.00209504482], ...
    	'G', 1);

    %% Create SerialLink object
    a=sin(pi/4);
    T=[a,a,0,0;-a,a,0,0;0,0,1,0.1034;0,0,0,1]
    robot = SerialLink([L1 L2 L3 L4 L5 L6 L7], 'name', 'PANDA', 'manufacturer', 'Franka-Emika', 'tool', T);

    qv = [0 0 0 -4 0 0 0]*deg;
    qr = [0 -90 -90 90 0 -90 90]*deg;
        
    % place the variables into the global workspace
    if nargin == 1
        r = robot;
    elseif nargin == 0
        assignin('caller', 'panda_RE', robot);
        assignin('caller', 'qv', qv); % zero angles
        assignin('caller', 'qr', qr); 
    end
end